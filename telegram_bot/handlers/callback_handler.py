import asyncio
from aiogram import types
from aiogram import F, Router
from settings.static import Message
from settings.utils import show_options
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from .state import CarDutyCalculation, ClientContacts
from settings.utils import (
    calc_toll, 
    set_contact_data, 
    format_float, 
    add_client_calculation,
)
from settings.static import EngineType, ClientType, CarType, Currency
from keyboards import keyboards
from settings.utils import get_exchange_rates
from datetime import datetime

router = Router()


# –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç

@router.callback_query(F.data == 'currencies')
async def ask_currency(callback: types.CallbackQuery):
    exchange_rates: dict[dict] = await get_exchange_rates() 

    text = 'üìà –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:\n\n'
    all_dates = []
    for currency_name, currency_data in exchange_rates.items(): 
        text += f"{currency_name} - {currency_data['exchange_rate']} ‚ÇΩ\n"
        updated_at: datetime = datetime.strptime(currency_data['updated_at'], '%Y-%m-%dT%H:%M:%S.%fZ')
        all_dates.append(updated_at.date())

    if all(d == all_dates[0] for d in all_dates):
        common_date = all_dates[0].strftime('%d.%m.%Y')
        text += f"\n‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ {common_date}\n–ò—Å—Ç–æ—á–Ω–∏–∫ - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–Ω–∫ –†–§"

    await callback.message.answer(text)
    await callback.answer()


# –†–∞—Å—á—ë—Ç –ø–æ—à–ª–∏–Ω—ã

@router.callback_query(F.data == 'calc')
async def ask_currency(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(CarDutyCalculation.car_type)
    car_type_buttons = keyboards.car_type_buttons
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=car_type_buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
    await callback.answer()


# –¢–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è
@router.callback_query(CarDutyCalculation.car_type, F.data.startswith('car_type_'))
async def ask_currency(callback: types.CallbackQuery, state: FSMContext):
    car_type = callback.data.split('_')[-1]
    await state.update_data(car_type=car_type)
    await state.set_state(CarDutyCalculation.currency)
    currency_buttons = keyboards.currency_buttons
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=currency_buttons)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
    await callback.answer()


# –í–∞–ª—é—Ç–∞
@router.callback_query(CarDutyCalculation.currency, F.data.startswith('currency_'))
async def ask_cost(callback: types.CallbackQuery, state: FSMContext):
    currency = callback.data.split('_')[-1]
    await state.update_data(currency=currency)
    await state.set_state(CarDutyCalculation.cost)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1200000):")
    await callback.answer()


# –°—Ç–æ–∏–º–æ—Å—Ç—å
@router.message(CarDutyCalculation.cost, F.text.regexp(r'^\d+$'))
async def ask_engine_volume(message: types.Message, state: FSMContext):
    await state.update_data(cost=int(message.text))
    await state.set_state(CarDutyCalculation.engine_volume)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è –≤ —Å–º¬≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1500):")


# –û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è
@router.message(CarDutyCalculation.engine_volume, F.text.regexp(r'^\d+$'))
async def ask_engine_type(message: types.Message, state: FSMContext):
    await state.update_data(engine_volume=int(message.text))
    await state.set_state(CarDutyCalculation.engine_type)
    engine_type_buttons = keyboards.engine_type_buttons
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=engine_type_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è:", reply_markup=keyboard)


# –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è
@router.callback_query(CarDutyCalculation.engine_type, F.data.startswith('engine_type_'))
async def ask_next_step(callback: types.CallbackQuery, state: FSMContext):
    engine_type = callback.data.split('_')[-1]
    await state.update_data(engine_type=engine_type)

    # –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, –∫—Ç–æ –≤–≤–æ–∑–∏—Ç –∞–≤—Ç–æ
    await state.set_state(CarDutyCalculation.client_type)
    client_type_buttons = keyboards.client_type_buttons
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=client_type_buttons)
    await callback.message.answer("–ö—Ç–æ –≤–≤–æ–∑–∏—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å:", reply_markup=keyboard)
    await callback.answer()


# –ö—Ç–æ –≤–≤–æ–∑–∏—Ç
@router.callback_query(CarDutyCalculation.client_type, F.data.startswith('client_type_'))
async def ask_age(callback: types.CallbackQuery, state: FSMContext):
    print('klfjsenr')
    client_type = callback.data.split('_')[-1]
    await state.update_data(client_type=client_type)

    if client_type == ClientType.PHYSICAL.value: 
        data = await state.get_data() 
        if data['engine_type'] in (EngineType.ELECTRO.value, EngineType.HYBRID_CONSISTENT.value):
            await state.set_state(CarDutyCalculation.power)
            await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ 30-–º–∏–Ω—É—Ç–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∫–í—Ç:')
            await callback.answer()
        else:
            await state.set_state(CarDutyCalculation.age)
            age_buttons = keyboards.age_buttons
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=age_buttons)
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)
            await callback.answer()
    elif client_type == ClientType.JURIDICAL.value: 
        await state.set_state(CarDutyCalculation.power)
        text = ''
        data = await state.get_data() 
        if data['engine_type'] in (EngineType.ELECTRO.value, EngineType.HYBRID_CONSISTENT.value):
            text = ("–í–≤–µ–¥–∏—Ç–µ 30-–º–∏–Ω—É—Ç–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –∫–í—Ç:")
        else: 
            text = ("–í–≤–µ–¥–∏—Ç–µ –º–æ—â–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ –ª. —Å.:")

        await callback.message.answer(text)
        await callback.answer()


# –≠—Ç–æ—Ç —à–∞–≥ (–ú–æ—â–Ω–æ—Å—Ç—å) —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –≥–∏–±—Ä–∏–¥–æ–≤
@router.message(CarDutyCalculation.power, F.text.regexp(r'^\d+$'))
async def ask_weight(message: types.Message, state: FSMContext):
    await state.update_data(power=int(message.text))
    data = await state.get_data() 
    car_type = data.get('car_type')

    await state.set_state(CarDutyCalculation.age)
    age_buttons = keyboards.age_buttons
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=age_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)


# –í–æ–∑—Ä–∞—Å—Ç
@router.callback_query(CarDutyCalculation.age, F.data.startswith('age_'))
async def calculate_duty(callback: types.CallbackQuery, state: FSMContext):
    age = callback.data.split('_')[-1]
    await state.update_data(age=age)
    data = await state.get_data()
    power_kw = data.get('power')
    if data['engine_type'] not in (EngineType.ELECTRO.value, EngineType.HYBRID_CONSISTENT.value): 
        if power_kw:
            power_kw = power_kw * 0.75
    duty_data = await calc_toll(
        price=data['cost'], 
        age=data['age'], 
        volume=data['engine_volume'], 
        currency=data['currency'], 
        car_type=data['car_type'],
        client_type=data['client_type'],
        power_kw=power_kw,
        engine_type=data['engine_type'], 
    )
    message_text = (
        f"–¢–∏–ø: {data['car_type']}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {format_float(data['cost'])} {data['currency']}\n"
        f"–û–±—ä—ë–º –¥–≤–∏–≥–∞—Ç–µ–ª—è: {data['engine_volume']} —Å–º¬≥\n"
    )

    if 'weight' in data and data['weight']:
        message_text += f"–ú–∞—Å—Å–∞: {data['weight']} —Ç–æ–Ω–Ω\n"

    message_text += (
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: {data['engine_type']}\n"
    ) 
    print(duty_data)
    duty, yts, tof, commission, nds, excise, result, exchange_rates = (
        duty_data.get('duty'),
        duty_data.get('yts'),
        duty_data.get('tof'),
        duty_data.get('commission'),
        duty_data.get('nds'),
        duty_data.get('excise'),
        duty_data.get('result'), 
        duty_data.get('exchange_rates'),
    )
    message_text += (
        f"\n*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞*:\n"
        f"–¢–∞–º–æ–∂–µ–Ω–Ω–∞—è –ø–æ—à–ª–∏–Ω–∞: {format_float(duty)} ‚ÇΩ\n"
        f"–£—Ç–∏–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–±–æ—Ä: {format_float(yts)} ‚ÇΩ\n"
        f"–¢–∞–º–æ–∂–µ–Ω–Ω—ã–µ —Å–±–æ—Ä—ã: {format_float(tof)} ‚ÇΩ\n"
    )
    if nds: 
        message_text += f"–ù–î–°: {format_float(nds)} ‚ÇΩ\n"
    if excise: 
        message_text += f"–ê–∫—Ü–∏–∑: {format_float(excise)} ‚ÇΩ\n"
    message_text += f"–ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏: {format_float(commission)} ‚ÇΩ\n\n"
    if data['currency'] != Currency.RUB.value: 
        currency = data['currency']
        updated_at = datetime.strptime(exchange_rates[currency]['updated_at'], '%Y-%m-%dT%H:%M:%S.%fZ')
        message_text += f"–ö—É—Ä—Å –Ω–∞ {updated_at.strftime('%d.%m.%Y')}: 1 {currency} = {exchange_rates[currency]['exchange_rate']} ‚ÇΩ\n\n"
    message_text += (
        f"*–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {format_float(result)} ‚ÇΩ*\n\n"
        "–î–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–º, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π\n\n"
        "*–¢–µ–ª–µ—Ñ–æ–Ω: +7 (111) 111-11-11*\n"
        "*Email: example@example.com*\n\n"
        "–¢–∞–∫–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
    )
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=keyboards.feedback_button)
    await callback.message.answer(message_text, reply_markup=keyboard)
    await callback.answer()

    # await add_client_calculation(
    #     telegram_id=callback.from_user.id, 
    #     price=data['cost'], 
    #     age=data['age'], 
    #     engine_volume=data['engine_volume'], 
    #     currency=data['currency'], 
    #     engine_type=data['engine_type'], 
    #     car_type=data['car_type'], 
    #     power_kw=data.get('power')
    # )

    await state.clear()


# –ó–∞—è–≤–∫–∞

@router.callback_query(F.data == 'feedback')
async def start_contact_collection(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ClientContacts.name)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–∫—Å–∏–º):")
    await callback.answer()

@router.message(ClientContacts.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ClientContacts.phone)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 71234567890 –∏–ª–∏ 81234567890):")

@router.message(ClientContacts.phone, F.text.regexp(r'^(7|8)\d{10}$'))
async def process_phone_valid(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    contact_data = await state.get_data()
    
    await set_contact_data(
        telegram_id=message.from_user.id, 
        name=contact_data['name'], 
        phone=contact_data['phone']
    )
    
    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
        f"–ò–º—è: {contact_data['name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {contact_data['phone']}\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )
    await state.clear()

@router.message(ClientContacts.phone)
async def process_phone_invalid(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 71234567890 –∏–ª–∏ 81234567890)")



# –ü–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç